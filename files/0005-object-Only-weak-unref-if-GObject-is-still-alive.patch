From 8d50e2b401236a380bb16301308b331413217a2d Mon Sep 17 00:00:00 2001
From: Georges Basile Stavracas Neto <georges.stavracas@gmail.com>
Date: Thu, 19 Apr 2018 22:27:55 -0300
Subject: [PATCH 5/6] object: Only weak unref if GObject is still alive

The function disassociate_js_gobject() is currently unconditionally
removing the weak reference of the wrapped GObject. This is because
we were previously assuming that there was always a toggle ref, and
so we would never reach this code path after the wrapped GObject was
destroyed.

Turns out, with commit 0cc23474f815 it is now a regular case to call
this function after the GObject is finalized. When that happens, it
will reach wrapped_gobj_dispose_notify() and the wrapped GObject will
be marked as finalized. disassociate_js_gobject(), however, will try
to weak unref it, without checking if the GObject was finalized already.

This commit fix that by simply checking if the wrapped GObject was
finalized before trying to weak unref it.
---
 gi/object.cpp | 3 ++-
 1 file changed, 2 insertions(+), 1 deletion(-)

diff --git a/gi/object.cpp b/gi/object.cpp
index 606a918..a927b64 100644
--- a/gi/object.cpp
+++ b/gi/object.cpp
@@ -1360,7 +1360,8 @@ disassociate_js_gobject(GObject *gobj)
     ObjectInstance *priv = get_object_qdata(gobj);
     bool had_toggle_down, had_toggle_up;
 
-    g_object_weak_unref(priv->gobj, wrapped_gobj_dispose_notify, priv);
+    if (!priv->g_object_finalized)
+        g_object_weak_unref(gobj, wrapped_gobj_dispose_notify, priv);
 
     /* FIXME: this check fails when JS code runs after the main loop ends,
      * because the idle functions are not dispatched without a main loop.
-- 
2.16.3

